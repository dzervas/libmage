name: Release

on:
  create:
    tags:
      - v*

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          # For more check https://forge.rust-lang.org/release/platform-support.html
          # Tier 1
          # - i686-pc-windows-msvc
          # - i686-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v2
      # Sets RELEASE_VERSION to be refs/tags/v<version> -> <version>
      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF#refs/tags/v})

      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build libmage binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }} -v --bin libmage --release --all-features

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./target/release/libmage
          asset_name: libmage-${{ matrix.target }}
          asset_content_type: application/x-binary

      # - name: Publish to crates.io
      #   if: matrix.target == 'x86_64-unknown-linux-gnu'
      #   env:
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      #   run: |
      #     cargo publish --all-features
