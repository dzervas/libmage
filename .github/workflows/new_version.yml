name: Release

# Either push a new tag in the form v1.2.3
# or manually trigger the job with version 1.2.3 and a tag will be created
on:
  create:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: '"major", "minor", "patch" or "1.2.3" - leave empty for "patch"'

jobs:
  build:
    strategy:
      matrix:
        target:
          # For more check https://forge.rust-lang.org/release/platform-support.html
          # Tier 1
          # - i686-pc-windows-msvc
          # - i686-unknown-linux-gnu
          - triplet: x86_64-apple-darwin
            extension: ""
            os: macos-latest
          - triplet: x86_64-pc-windows-msvc
            extension: ".exe"
            os: windows-latest
          - triplet: x86_64-unknown-linux-gnu
            extension: ""
            os: ubuntu-latest

    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: actions/checkout@v2

      # Version bumping to generate correct binaries
      - name: Set env (manually triggered)
        if: github.event_name == 'workflow_dispatch'
        run: echo ::set-env name=RELEASE_VERSION::${{ github.event.inputs.version }}
      - name: Bump versions
        if: github.event_name == 'workflow_dispatch'
        run: ./scripts/version-bump.sh ${{ github.event.inputs.version }}

      # Platform specific setup & tests
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target.triplet }}
      - name: Test everything
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --target ${{ matrix.target.triplet }} -v --release --all-features

      - name: Build libmage binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target.triplet }} -v --bin libmage --release --all-features

      - name: Upload libmage binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: libmage-${{ matrix.target.triplet }}${{ matrix.target.extension }}
          path: target/${{ matrix.target.triplet }}/release/libmage${{ matrix.target.extension }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Sets RELEASE_VERSION to be refs/tags/v<version> -> <version>
      - name: Set env (tag pushed)
        if: github.event_name == 'create'
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF#refs/tags/v})
      - name: Set env (manually triggered)
        if: github.event_name == 'workflow_dispatch'
        run: echo ::set-env name=RELEASE_VERSION::${{ github.event.inputs.version }}

      - name: Tag release (manually triggered)
        if: github.event_name == 'workflow_dispatch'
        run: git tag v${{ github.event.inputs.version }}
      - name: Push changes (manually triggered)
        if: github.event_name == 'workflow_dispatch'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          path: release
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          tag_name: v${{ env.RELEASE_VERSION }}
          fail_on_unmatched_files: true

      # - name: Publish to crates.io
        # env:
          # CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        # run: |
          # cargo publish --all-features
